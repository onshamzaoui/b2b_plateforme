generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role
  companyName String?   
  
  // Password Reset
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  
  // Personal Information
  phone     String?
  location  String?
  website   String?
  linkedin  String?
  github    String?
  profileImage String?
  
  // Professional Information (for freelances)
  profession String?
  bio       String?
  experience String?
  dailyRate Int?
  availability String?
  skills    String[]
  portfolio String[]
  
  // Company Information (for entreprises)
  companyDescription String?
  companySize String?
  companySector String?
  companyWebsite String?
  companyLogo String?
  
  // Notification Preferences
  notificationsNewMissions Boolean @default(true)
  notificationsApplications Boolean @default(true)
  notificationsMarketing Boolean @default(false)
  
  // Relations
  missions  Mission[] @relation("CompanyMissions")
  applications Application[]
  invoices Invoice[]
  cvs CV[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Mission {
  id                 String        @id @default(uuid())
  title              String
  description        String
  budget             Float
  status             MissionStatus @default(PUBLISHED)
  companyId          String
  requirements       String?
  projectContext     String?
  skills             String[]
  location           String?
  startDate          String?
  duration           String?
  pricing            String?
  publishedAt        DateTime?
  companyLogo        String?
  companyDescription String?
  createdAt          DateTime      @default(now())
  applications       Application[]
  company            User          @relation("CompanyMissions", fields: [companyId], references: [id])
}

model Application {
  id           String   @id @default(uuid())
  missionId    String
  appliedAt    DateTime @default(now())
  availability String?
  dailyRate    Int
  experience   String?
  freelancerId String
  matchScore   Int
  motivation   String?
  portfolio    String[]
  skills       String[]
  status       String   @default("Nouveau")
  freelancer   User     @relation(fields: [freelancerId], references: [id])
  mission      Mission  @relation(fields: [missionId], references: [id])
}

model Invoice {
  id       String        @id @default(uuid())
  userId   String
  amount   Float
  status   InvoiceStatus @default(PENDING)
  issuedAt DateTime      @default(now())
  user     User          @relation(fields: [userId], references: [id])
}

model CV {
  id        String   @id @default(uuid())
  userId    String
  title     String
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  FREELANCE
  ENTREPRISE
  ADMIN
}

enum AppStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MissionStatus {
  PUBLISHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}
