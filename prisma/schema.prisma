generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role
  companyName String?   
  
  // Password Reset
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  
  // Personal Information
  phone     String?
  location  String?
  website   String?
  linkedin  String?
  github    String?
  profileImage String?
  
  // Professional Information (for freelances)
  profession String?
  bio       String?
  experience String?
  dailyRate Int?
  availability String?
  skills    String[]
  portfolio String[]
  
  // Company Information (for entreprises)
  companyDescription String?
  companySize String?
  companySector String?
  companyWebsite String?
  companyLogo String?
  
  // Notification Preferences
  notificationsNewMissions Boolean @default(true)
  notificationsApplications Boolean @default(true)
  notificationsMarketing Boolean @default(false)
  
  // Payment Information
  subscriptionId String?
  stripeCustomerId String?
  currentPlan PricingTier @default(FREE)
  planExpiresAt DateTime?
  applicationCredits Int @default(0) // For freelancers
  missionCredits Int @default(0)    // For enterprises
  
  // Relations
  missions  Mission[] @relation("CompanyMissions")
  applications Application[]
  freelancerInvoices Invoice[] @relation("FreelancerInvoices")
  companyInvoices Invoice[] @relation("CompanyInvoices")
  cvs CV[]
  freelancerContracts Contract[] @relation("FreelancerContracts")
  companyContracts Contract[] @relation("CompanyContracts")
  payments Payment[]
  subscription Subscription?
  // Chat relations
  sentMessages Message[]
  conversationParticipants ConversationParticipant[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Mission {
  id                 String        @id @default(uuid())
  title              String
  description        String
  budget             Float
  status             MissionStatus @default(PUBLISHED)
  companyId          String
  requirements       String?
  projectContext     String?
  skills             String[]
  location           String?
  startDate          String?
  duration           String?
  pricing            String?
  publishedAt        DateTime?
  companyLogo        String?
  companyDescription String?
  createdAt          DateTime      @default(now())
  applications       Application[]
  contracts          Contract[]
  invoices           Invoice[]
  company            User          @relation("CompanyMissions", fields: [companyId], references: [id])
}

model Application {
  id           String   @id @default(uuid())
  missionId    String
  appliedAt    DateTime @default(now())
  availability String?
  dailyRate    Int
  experience   String?
  freelancerId String
  matchScore   Int
  motivation   String?
  portfolio    String[]
  skills       String[]
  status       String   @default("Nouveau")
  freelancer   User     @relation(fields: [freelancerId], references: [id])
  mission      Mission  @relation(fields: [missionId], references: [id])
  contract     Contract?
}

model Invoice {
  id              String        @id @default(uuid())
  invoiceNumber   String        @unique
  contractId      String?       // Link to contract if generated from contract
  missionId       String?       // Link to mission
  freelancerId    String        // Who is being paid
  companyId       String        // Who is paying
  amount          Float
  taxRate         Float         @default(0.20) // 20% VAT by default
  taxAmount       Float
  totalAmount     Float
  description     String
  status          InvoiceStatus @default(PENDING)
  issuedAt        DateTime      @default(now())
  dueDate         DateTime
  paidAt          DateTime?
  paymentMethod   String?       // How it was paid
  notes           String?       // Additional notes
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  freelancer      User          @relation("FreelancerInvoices", fields: [freelancerId], references: [id])
  company         User          @relation("CompanyInvoices", fields: [companyId], references: [id])
  contract        Contract?     @relation(fields: [contractId], references: [id])
  mission         Mission?      @relation(fields: [missionId], references: [id])
}

model CV {
  id        String   @id @default(uuid())
  userId    String
  title     String
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Contract {
  id              String        @id @default(uuid())
  applicationId   String        @unique
  missionId       String
  freelancerId    String
  companyId       String
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime?
  dailyRate       Int
  totalAmount     Float?
  terms           String        // Contract terms and conditions
  status          ContractStatus @default(DRAFT)
  signedByFreelancer Boolean    @default(false)
  signedByCompany Boolean      @default(false)
  signedAt        DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  application     Application   @relation(fields: [applicationId], references: [id])
  mission         Mission       @relation(fields: [missionId], references: [id])
  freelancer      User          @relation("FreelancerContracts", fields: [freelancerId], references: [id])
  company         User          @relation("CompanyContracts", fields: [companyId], references: [id])
  invoices        Invoice[]
}

enum Role {
  FREELANCE
  ENTREPRISE
  ADMIN
}

enum AppStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MissionStatus {
  PUBLISHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
}

enum ContractStatus {
  DRAFT
  PENDING_SIGNATURE
  ACTIVE
  COMPLETED
  CANCELLED
}

model Payment {
  id              String        @id @default(uuid())
  userId          String
  stripePaymentId String?       @unique
  amount          Float
  currency        String        @default("eur")
  status          PaymentStatus @default(PENDING)
  type            PaymentType
  description     String?
  metadata        Json?         // For storing additional payment data
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  user            User          @relation(fields: [userId], references: [id])
  subscription    Subscription?
}

model Subscription {
  id                String             @id @default(uuid())
  userId            String             @unique
  paymentId         String?            @unique
  stripeSubscriptionId String?         @unique
  pricingTier       PricingTier
  status            SubscriptionStatus @default(ACTIVE)
  startDate         DateTime           @default(now())
  endDate           DateTime?
  cancelAtPeriodEnd Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  user              User               @relation(fields: [userId], references: [id])
  payment           Payment?           @relation(fields: [paymentId], references: [id])
}

enum PricingTier {
  // Freelancer plans
  FREE
  PRO
  EXPERT
  
  // Enterprise plans
  STARTER
  BUSINESS
  ENTERPRISE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentType {
  SUBSCRIPTION
  ONE_TIME
  APPLICATION_CREDITS
  MISSION_CREDITS
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  TRIAL
}

model Conversation {
  id        String   @id @default(uuid())
  channelName String @unique // e.g., "mission-123" or "user-456-789"
  missionId String?  // If it's a mission-related conversation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  messages  Message[]
  participants ConversationParticipant[]
  
  @@map("conversations")
}

model ConversationParticipant {
  id             String @id @default(uuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())
  lastReadAt     DateTime @default(now())
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  messageType    MessageType @default(TEXT)
  createdAt      DateTime @default(now())
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}
